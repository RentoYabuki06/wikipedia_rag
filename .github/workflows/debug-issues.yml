name: Debug Issue Creation

on:
  workflow_dispatch:

jobs:
  debug-environment:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Debug Environment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            console.log('üîç Debugging GitHub Actions Environment');
            console.log('=====================================');
            
            // Check current working directory
            console.log('\nüìÅ Current Directory Info:');
            console.log('Working directory:', process.cwd());
            console.log('Directory contents:', fs.readdirSync('.'));
            
            // Check if issues directory exists
            console.log('\nüìã Issues Directory Check:');
            if (fs.existsSync('issues')) {
              console.log('‚úÖ Issues directory exists');
              const issuesDir = 'issues';
              const files = fs.readdirSync(issuesDir);
              console.log(`Found ${files.length} files:`);
              files.forEach(file => {
                const filePath = path.join(issuesDir, file);
                const stats = fs.statSync(filePath);
                console.log(`  - ${file} (${stats.size} bytes)`);
              });
            } else {
              console.log('‚ùå Issues directory does not exist!');
            }
            
            // Check GitHub context
            console.log('\nüîë GitHub Context Info:');
            console.log('Repository:', context.repo);
            console.log('Actor:', context.actor);
            console.log('Event name:', context.eventName);
            
            // Test issue creation permissions
            console.log('\nüß™ Testing Issue Creation Permissions:');
            try {
              // Try to list existing issues to test read permissions
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                per_page: 5
              });
              console.log(`‚úÖ Can read issues (found ${existingIssues.data.length} recent issues)`);
              
              // Try to create a test issue to verify write permissions  
              console.log('üß™ Testing issue creation...');
              const testIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üß™ Test Issue - Please Delete',
                body: '> **This is a test issue created by the debug workflow.**\n> \n> Please delete this issue - it was created to test permissions.\n> \n> Created at: ' + new Date().toISOString(),
                labels: ['test', 'auto-generated']
              });
              
              console.log(`‚úÖ Successfully created test issue #${testIssue.data.number}`);
              console.log(`Test issue URL: ${testIssue.data.html_url}`);
              
              // Immediately close the test issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: testIssue.data.number,
                state: 'closed'
              });
              console.log('‚úÖ Closed test issue');
              
            } catch (error) {
              console.error('‚ùå Issue creation test failed:');
              console.error('Error message:', error.message);
              if (error.response) {
                console.error('Response status:', error.response.status);
                console.error('Response data:', error.response.data);
              }
            }
            
            // Check specific issue files
            console.log('\nüìÑ Issue File Validation:');
            if (fs.existsSync('issues')) {
              const expectedFiles = [
                '01_project_setup.md',
                '02_data_loading.md', 
                '03_text_chunking.md',
                '04_embedding_setup.md',
                '05_faiss_index.md',
                '06_build_script.md',
                '07_reranking.md',
                '08_llm_generation.md',
                '09_rag_integration.md',
                '10_gradio_ui.md',
                '11_evaluation.md',
                '12_integration_testing.md'
              ];
              
              expectedFiles.forEach(filename => {
                const filepath = path.join('issues', filename);
                if (fs.existsSync(filepath)) {
                  const content = fs.readFileSync(filepath, 'utf8');
                  const lines = content.split('\n');
                  const title = lines.find(line => line.startsWith('#'));
                  console.log(`‚úÖ ${filename} (${content.length} chars, title: ${title || 'No title found'})`);
                } else {
                  console.log(`‚ùå Missing: ${filename}`);
                }
              });
            }
            
            console.log('\nüéØ Debug Summary:');
            console.log('- If issues directory exists and files are present, the problem is likely in the main workflow');
            console.log('- If permissions test passed, GitHub API access is working');  
            console.log('- Check the main workflow logs for specific error messages');
            console.log('- Make sure to select "Create all issues at once" when running the main workflow');