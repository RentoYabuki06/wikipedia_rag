name: Convert Issues to GitHub Issues

on:
  workflow_dispatch:
    inputs:
      create_all:
        description: 'Create all issues at once'
        required: false
        default: false
        type: boolean
      issue_numbers:
        description: 'Specific issue numbers to create (comma-separated, e.g., "01,02,03")'
        required: false
        default: ''
        type: string

jobs:
  create-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Create GitHub Issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Issue metadata mapping
            const issueMetadata = {
              '01': {
                title: '🏗️ プロジェクトの基本セットアップ',
                labels: ['enhancement', 'good first issue', '初級', 'setup'],
                assignees: [],
                milestone: null
              },
              '02': {
                title: '📥 Wikipediaデータ取得機能の実装',
                labels: ['feature', '初級', 'data-processing'],
                assignees: [],
                milestone: null
              },
              '03': {
                title: '✂️ テキスト分割（チャンキング）機能の実装', 
                labels: ['feature', '中級', 'nlp', 'chunking'],
                assignees: [],
                milestone: null
              },
              '04': {
                title: '🔤 埋め込みモデル（E5）のセットアップと実装',
                labels: ['feature', '中級', 'embedding', 'e5'],
                assignees: [],
                milestone: null
              },
              '05': {
                title: '🔍 FAISSインデックスの構築と保存',
                labels: ['feature', '中級', 'vector-search', 'faiss'],
                assignees: [],
                milestone: null
              },
              '06': {
                title: '⚙️ インデックス構築用統合スクリプト（build_wiki_index.py）の実装',
                labels: ['feature', '中級', 'pipeline', 'cli'],
                assignees: [],
                milestone: null
              },
              '07': {
                title: '🔄 再ランキング機能の実装（BGE Reranker）',
                labels: ['feature', '中級', 'reranking', 'bge'],
                assignees: [],
                milestone: null
              },
              '08': {
                title: '🤖 LLM応答生成機能の実装（Qwen2.5）',
                labels: ['feature', '上級', 'llm', 'generation', 'qwen'],
                assignees: [],
                milestone: null
              },
              '09': {
                title: '🔗 検索・生成統合スクリプト（rag_wiki.py）の実装',
                labels: ['feature', '中級', 'rag', 'integration'],
                assignees: [],
                milestone: null
              },
              '10': {
                title: '🖥️ Gradio UIの実装（app_wiki.py）',
                labels: ['feature', '中級', 'ui', 'gradio', 'web'],
                assignees: [],
                milestone: null
              },
              '11': {
                title: '📊 評価データセットの作成とRecall@K評価機能の実装',
                labels: ['feature', '中級', 'evaluation', 'testing'],
                assignees: [],
                milestone: null
              },
              '12': {
                title: '🧪 統合テスト・デバッグ・ドキュメント整備',
                labels: ['testing', '中級', 'documentation', 'integration'],
                assignees: [],
                milestone: null
              }
            };

            // Function to read markdown file and convert to issue body
            function convertMarkdownToIssueBody(content) {
              // Remove the title (first line with #)
              const lines = content.split('\n');
              const withoutTitle = lines.slice(1).join('\n');
              
              // Add issue template header
              const header = '> 📋 **このIssueは自動生成されました**\n' +
                           '> - 予想作業時間が記載されています\n' +
                           '> - チェックボックスで進捗を管理してください\n' +
                           '> - 困った時は @RentoYabuki06 にメンション\n\n' +
                           '---\n\n';
              
              return header + withoutTitle;
            }

            // Get input parameters
            const createAll = context.payload.inputs.create_all === 'true';
            const issueNumbers = context.payload.inputs.issue_numbers ? 
              context.payload.inputs.issue_numbers.split(',').map(n => n.trim().padStart(2, '0')) : [];

            // Determine which issues to create
            let issuesToCreate = [];
            if (createAll) {
              issuesToCreate = Object.keys(issueMetadata);
            } else if (issueNumbers.length > 0) {
              issuesToCreate = issueNumbers.filter(num => issueMetadata[num]);
            } else {
              console.log('No issues specified to create');
              return;
            }

            console.log(`Creating issues: ${issuesToCreate.join(', ')}`);

            // Create issues
            for (const issueNum of issuesToCreate) {
              try {
                const filePath = `issues/${issueNum}_*.md`;
                const issuesDir = 'issues';
                const files = fs.readdirSync(issuesDir);
                const matchingFile = files.find(file => file.startsWith(`${issueNum}_`));
                
                if (!matchingFile) {
                  console.log(`File not found for issue ${issueNum}`);
                  continue;
                }

                const fullPath = path.join(issuesDir, matchingFile);
                const content = fs.readFileSync(fullPath, 'utf8');
                const metadata = issueMetadata[issueNum];
                
                const issueBody = convertMarkdownToIssueBody(content);
                
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: metadata.title,
                  body: issueBody,
                  labels: metadata.labels,
                  assignees: metadata.assignees,
                  milestone: metadata.milestone
                });

                console.log(`✅ Created issue #${issue.data.number}: ${metadata.title}`);
                
                // Add a small delay to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 1000));
                
              } catch (error) {
                console.error(`❌ Failed to create issue ${issueNum}:`, error.message);
              }
            }

      - name: Create Project Board (if not exists)
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Check if project already exists
              const projects = await github.rest.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const existingProject = projects.data.find(p => p.name === 'Wikipedia RAG Development');
              
              if (!existingProject) {
                const project = await github.rest.projects.createForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'Wikipedia RAG Development',
                  body: '📋 Wikipedia RAG システム開発プロジェクト\n\n' +
                        '## 🎯 目標\n' +
                        '日本語WikipediaベースのRAGシステムを段階的に実装\n\n' +
                        '## 📊 進捗管理\n' +
                        '- **ToDo**: 未着手のタスク\n' +
                        '- **In Progress**: 作業中のタスク\n' +
                        '- **Review**: レビュー待ち\n' +
                        '- **Done**: 完了したタスク\n\n' +
                        '各Issueは15-30分で完了できるよう設計されています。',
                });
                
                console.log(`✅ Created project board: ${project.data.name}`);
                
                // Create columns
                const columns = ['ToDo', 'In Progress', 'Review', 'Done'];
                for (const column of columns) {
                  await github.rest.projects.createColumn({
                    project_id: project.data.id,
                    name: column
                  });
                  console.log(`✅ Created column: ${column}`);
                }
              } else {
                console.log('📋 Project board already exists');
              }
            } catch (error) {
              console.error('❌ Failed to create project board:', error.message);
            }